// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MatrixRenderer
import CoreMedia
import CoreTelephony
import Foundation
import LocalAuthentication
import QuartzCore
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
public enum FontDefaultName : Swift.String {
  case OpenSans_Bold
  case OpenSans_Light
  case OpenSans_Medium
  case OpenSans_Regular
  case OpenSans_SemiBold
  case Poppins_Bold
  case Poppins_Italic
  case Poppins_Light
  case Poppins_Medium
  case Poppins_Regular
  case Poppins_SemiBold
  case Roboto_Bold
  case Roboto_Italic
  case Roboto_Light
  case Roboto_Medium
  case Roboto_Regular
  case TimesNewRomanPS_Bold
  case TimesNewRoman_Italic
  case TimesNewRoman_Regular
  case Circula_Medium
  case Circula_Bold
  case Circula_Regular
  case Circula_Light
  public func font(size: CoreGraphics.CGFloat) -> UIKit.UIFont
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NVActivityIndicatorType : Swift.CaseIterable {
  case blank
  case ballPulse
  case ballGridPulse
  case ballClipRotate
  case squareSpin
  case ballClipRotatePulse
  case ballClipRotateMultiple
  case ballPulseRise
  case ballRotate
  case cubeTransition
  case ballZigZag
  case ballZigZagDeflect
  case ballTrianglePath
  case ballScale
  case lineScale
  case lineScaleParty
  case ballScaleMultiple
  case ballPulseSync
  case ballBeat
  case ballDoubleBounce
  case lineScalePulseOut
  case lineScalePulseOutRapid
  case ballScaleRipple
  case ballScaleRippleMultiple
  case ballSpinFadeLoader
  case lineSpinFadeLoader
  case triangleSkewSpin
  case pacman
  case ballGridBeat
  case semiCircleSpin
  case ballRotateChase
  case orbit
  case audioEqualizer
  case circleStrokeSpin
  public static func == (a: MatrixRenderer.NVActivityIndicatorType, b: MatrixRenderer.NVActivityIndicatorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [MatrixRenderer.NVActivityIndicatorType]
  public static var allCases: [MatrixRenderer.NVActivityIndicatorType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public typealias FadeInAnimation = (UIKit.UIView) -> Swift.Void
public typealias FadeOutAnimation = (UIKit.UIView, @escaping () -> Swift.Void) -> Swift.Void
@objc @_Concurrency.MainActor(unsafe) final public class NVActivityIndicatorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_TYPE: MatrixRenderer.NVActivityIndicatorType
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_TEXT_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_PADDING: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_SIZE: CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD: Swift.Int
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME: Swift.Int
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE_SPACING: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE_FONT: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_BACKGROUND_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_FADE_IN_ANIMATION: (_ view: UIKit.UIView) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_FADE_OUT_ANIMATION: (_ view: UIKit.UIView, _ complete: @escaping () -> Swift.Void) -> Swift.Void
  @_Concurrency.MainActor(unsafe) final public var type: MatrixRenderer.NVActivityIndicatorType
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var color: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var padding: CoreGraphics.CGFloat
  @available(*, deprecated)
  @_Concurrency.MainActor(unsafe) final public var animating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, type: MatrixRenderer.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreGraphics.CGFloat? = nil)
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var bounds: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) final public func startAnimating()
  @_Concurrency.MainActor(unsafe) final public func stopAnimating()
  @objc deinit
}
public struct ProjectDetailModel : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers open class Reach {
  @objc deinit
}
public protocol ScreenDataGetterDelegate {
  func willPresentController(viewController: UIKit.UIViewController)
}
@objc @_inheritsConvenienceInitializers public class ScreenDataGetter : ObjectiveC.NSObject {
  public static let shared: MatrixRenderer.ScreenDataGetter
  public var objScreenDataGetterDelegate: MatrixRenderer.ScreenDataGetterDelegate?
  public func getRender(application: UIKit.UIApplication)
  public func getData(param: Foundation.NSMutableDictionary, complition: @escaping (_ userData: MatrixRenderer.ProjectDetailModel?, _ messageData: Any?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PresentViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func registerFonts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func viewPopupHandler()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MatrixRenderer.PresentViewController {
  @_Concurrency.MainActor(unsafe) public func didGetJsonString() -> Swift.String?
}
extension UIKit.UIAlertController {
  @_Concurrency.MainActor(unsafe) public func show()
}
@_hasMissingDesignatedInitializers public class DataManager {
  public static let shared: MatrixRenderer.DataManager
  public var isPermissionForOnboarding: Swift.Bool {
    get
    set
  }
  public var isOpenPermissionPopup: Swift.Int {
    get
    set
  }
  @objc deinit
}
extension MatrixRenderer.FontDefaultName : Swift.Equatable {}
extension MatrixRenderer.FontDefaultName : Swift.Hashable {}
extension MatrixRenderer.FontDefaultName : Swift.RawRepresentable {}
extension MatrixRenderer.NVActivityIndicatorType : Swift.Equatable {}
extension MatrixRenderer.NVActivityIndicatorType : Swift.Hashable {}
